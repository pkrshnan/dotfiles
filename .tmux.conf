# colours
set -g default-terminal "screen-256color"

# https://github.com/seebi/tmux-colors-solarized/blob/master/tmuxcolors-256.conf
# set window split
bind-key | split-window -h
bind-key - split-window

# other binding
bind-key -n S-Up set-option -g status
bind-key -n S-Down set-option -g status
bind-key -n S-Left previous-window
bind-key -n S-Right next-window

# default window title colors
set-window-option -g window-status-style fg=white,bg=default,dim # fg=base0

# active window title colors
set-window-option -g window-status-current-style fg=green,bg=default,bright # fg=orange
setw -g window-status-format         ' #(echo "#{pane_current_command}") '
setw -g window-status-current-format ' #(echo "#{pane_current_command}") '

# pane border
set -g pane-border-style fg=colour239,bg=default
set -g pane-active-border-style bg=default,fg=colour239

# status
set -g status-interval 1
set -g status-justify left 
set -g status-right ''
set -g status-left ''
set -g status-style bg=default

# message
set -g message-style fg=white,bg=default

# Start numbering at 1
set -g base-index 1

# Mouse
set mouse on

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# auto window rename
set-window-option -g automatic-rename

# https://github.com/edkolev/dots/blob/master/tmux.conf

# smart switching
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

